# Generated by Django 3.2.18 on 2023-05-12 10:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('price', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('unit_weight', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('units', models.PositiveIntegerField(default=1)),
                ('type', models.IntegerField(choices=[(0, 'Solid'), (1, 'Liquid'), (2, 'Non-Edibles')], default=0)),
                ('supplier', models.CharField(default='VILA', max_length=20)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ingredientQuantity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=500)),
                ('ingredient_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='stock_controller_app.ingredient')),
            ],
            options={
                'ordering': ['ingredient_name'],
                'unique_together': {('ingredient_name', 'quantity')},
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipe_name', models.CharField(max_length=200, unique=True)),
                ('notes', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('tubs', models.PositiveIntegerField(default=1)),
                ('ingredient', models.ManyToManyField(to='stock_controller_app.ingredientQuantity')),
            ],
            options={
                'ordering': ['recipe_name'],
            },
        ),
        migrations.CreateModel(
            name='IntermediateIngredientRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stock_controller_app.ingredientquantity')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stock_controller_app.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='IngredientsCalculation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('ingredient', models.ManyToManyField(to='stock_controller_app.ingredientQuantity')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stock_controller_app.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('worker_type', models.CharField(choices=[('scooper', 'Scooper'), ('cook', 'Cook'), ('stock-controller', 'Stock Controller')], default='scooper', max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='customuser_set', related_query_name='customuser', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set', related_query_name='customuser', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
